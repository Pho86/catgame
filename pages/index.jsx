import Head from 'next/head'
import Image from 'next/image'
import styles from '@/styles/Home.module.css'
import axios from 'axios';
import { useEffect, useState } from 'react';
import CatDexCard from '@/components/Molecules/CatDexCard';
import CatDex from '@/components/Organisms/CatDex';
import UserInterface from '@/components/Organisms/UserInterface';
import Cat from '@/components/Atoms/Cat';
import { selectRandomFromArray, generateRandomNumber } from '@/util';



export default function Home({ data }) {

  const [cats, setCats] = useState([]);
  const [catDex, setCatDex] = useState(false);
  const [catCard, setCatCard] = useState(0);
  const [randomCat, setRandomCat] = useState();
  const [randomCats, setRandomCats] = useState([])
  const [location, setLocation] = useState("Vancouver");
  const [weather, setWeather] = useState();

  const catOptions = {
    method: 'GET',
    url: 'http://localhost:3000/api/catbreed',
  };
  if (process.env.VERCEL_URL) {
    options.url = `https://${process.env.NEXT_PUBLIC_VERCEL_URL}/api/catbreed`;
  }
  let apiKey = process.env.NEXT_PUBLIC_OPENWEATHER_KEY;
  let lang = "en";
  let units = "metric";
  const weatherURL = `https://api.openweathermap.org/data/2.5/weather?q=${location}&units=${units}&appid=${apiKey}&lang=${lang}`


  const getData = async () => {
    const result = await axios.request(catOptions)
    const weatherResult = await axios.get(weatherURL)
    try {
      setCats(result.data)
      setWeather(weatherResult.data);
      console.log(weatherResult.data)
      return result.data
    }
    catch (error) {
      console.log(error)
    }
  }


  useEffect(() => {
    async function get() {
      const data = await getData()
      const amountOfCats = generateRandomNumber(1, 2)
      for (let i = 0; i < amountOfCats; i++) {
        let random = selectRandomFromArray(data)
        randomCats.push(random)
      }
      // setRandomCats(random)
    }
    get();
  }, [])

  return (

    <>
      <Head>
        <title>Neko Teikoku</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} background`}>
        <h1>Neko Teikoku</h1>
        <h2>Meowing @ {weather && weather.name}</h2>

        <CatDex catData={cats} catDex={catDex} onExit={() => { setCatDex(!catDex) }} activeCats={cats} selectCatCard={(id) => { console.log(id); setCatCard(id) }} />
        {cats && cats.map((cat, i) => {
          return (
            <CatDexCard key={i} catData={cat} show={catCard} width={"65%"} onExit={() => { setCatCard(0) }} />
          )
        })}
        <UserInterface weatherData={weather} onCatDexClick={() => { setCatDex(!catDex) }} />
        {/* {randomCat && <Cat catData={randomCat} image={'/cats/catrest.svg'} alt={"MEOW MEOW"} onClick={() => { console.log(randomCat.id); setCatCard(randomCat.id); }} />} */}
        {randomCats && randomCats.map((cat, i) => {
          return <Cat key={i} catData={randomCat} image={'/cats/catrest.svg'} alt={"MEOW MEOW"} onClick={() => { console.log(cat.id); setCatCard(cat.id); }} />
        })}
      </main>
    </>
  )
}

// export async function getServerSideProps(context) {
//   let url = "http://localhost:3000/api/catbreed";
//   // if (process.env.VERCEL_URL) {
//   //   url = `https://${process.env.VERCEL_URL}/api/catbreed`;
//   // }
//   const { data } = await axios({
//     method: 'get',
//     url: url,
//   })
//   return {
//     props: { data }, // will be passed to the page component as props
//   }
// }